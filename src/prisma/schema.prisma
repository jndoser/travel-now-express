// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  clerkId String
  email String @unique
  photo String?
  bio String?
  role String
  isRejected Boolean
  feedbacks Feedback[]
  rooms Room[]
  savedRoomIds String[] @db.ObjectId
  savedRooms Room[] @relation("room-saving", fields: [savedRoomIds], references: [id])
}

model Room {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  address String
  capacity Int
  price Int
  status String
  imageUrls String[]
  serviceIDs String[] @db.ObjectId
  services Service[] @relation(fields: [serviceIDs], references: [id])
  feedback Feedback[]
  ownerId String @db.ObjectId
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  savedUserIds String[] @db.ObjectId
  savedUsers User[] @relation("room-saving", fields: [savedUserIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  imageUrl String?
  roomIDs String[] @db.ObjectId
  rooms Room[] @relation(fields: [roomIDs], references: [id])
}

model Feedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  roomId String @db.ObjectId
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  rating Int
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
